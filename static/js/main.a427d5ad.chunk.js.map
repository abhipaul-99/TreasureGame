{"version":3,"sources":["logo.svg","game/BoxSample.js","game/Header.js","game/Box.js","game/Cell.js","game/Footer.js","game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","gridArray","Array","i","React","Component","Cell","props","onClick","changeGrid","id","disabled","disable","count","Box","e","console","log","target","arr","split","state","rowNo","Math","abs","i_win","columnNo","j_win","innerHTML","classList","add","setState","restart","window","location","reload","floor","random","table","j","this","map","row","index","Footer","Game","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a427d5ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport Cell from './Cell';\nimport './styles.css';\n\nlet size = 5;\nlet gridArray = new Array(size);\nfor(let i=0;i<size;i++){\n    gridArray[i] = new Array(size);\n}\nclass BoxSample extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            i_win: Math.floor(Math.random()*4),\n            j_win: Math.floor(Math.random()*4),\n            count: 0,\n            disable: false,\n        }\n        console.log(\"I WIN = \" + this.state.i_win + \" J WIN = \" + this.state.j_win + \" Count = \"+this.state.count);\n    } \n    changeGrid = (e) => {\n        \n        console.log(e.target);\n        console.log(\"Target ID =\"+e.target.id);\n        let arr = e.target.id.split(\" \");\n        console.log(\"i=\"+arr[0]+\", j=\"+arr[1]+\", Count = \" + this.state.count);\n        if(arr[0]==this.state.i_win && arr[1]==this.state.j_win) {\n            e.target.innerHTML = \"W\";\n            e.target.classList.add('winner');\n            this.setState({disable: true, count: this.state.count+1});\n        }\n        else {\n            e.target.innerHTML = \"L\";\n            e.target.classList.add('loser');\n            this.setState({count: this.state.count+1});\n        }\n        gridArray[arr[0]][arr[1]] = 1;\n    }\n\n\n\n    render() {\n        let table = new Array(size);\n        for(let i=0;i<size;i++){\n            table[i] = new Array(size);\n        }\n        for(let i=0;i<size;i++) {\n            for(let j=0;j<size;j++) {\n                table[i][j] = <Cell changeGrid={this.changeGrid} id={i+\" \"+j} disable={this.state.disable}/>;\n            }\n        }\n        return (\n            <div className=\"box-container\">\n                    <div className=\"grid\">\n                        <div className=\"box-text-container\">\n                            <div className=\"box-text\">\n                                {this.state.disable == false ? 'No. of Tries = '+this.state.count : 'Treasure Found! No. of tries = '+this.state.count}\n                            </div>\n                        </div>\n                        <div>\n                            {table.map((row, index)=> {\n                                return <div>{row}</div>;\n                            })}\n                        </div>\n                    </div>\n            </div>\n        );\n    }\n}\n\nexport default BoxSample;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\n\nfunction Header(){\n    return (\n        <div className=\"header-container\">\n            <div >\n                <div className = \"header-text\">Treasure Game</div>\n            </div>\n            <div className=\"legend\">\n                <div className=\"cold legend-box\">Not Close</div>\n                <div className=\"warm legend-box\">Close</div>\n                <div className=\"hot legend-box\">Very Close</div>\n                <div className = \"winner legend-box\">Treasure!</div>\n            </div>\n            \n        </div>\n        \n    );\n}\n\nexport default Header;","import React from 'react';\nimport Cell from './Cell';\nimport './styles.css';\n\nlet rowsize = 10;\nlet colsize = 20;\nlet gridArray = new Array(rowsize);\nfor(let i=0;i<rowsize;i++){\n    gridArray[i] = new Array(colsize);\n}\nclass Box extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            i_win: Math.floor(Math.random()*rowsize),\n            j_win: Math.floor(Math.random()*colsize),\n            count: 0,\n            disable: false,\n        }\n        console.log(\"I WIN = \" + this.state.i_win + \" J WIN = \" + this.state.j_win + \" Count = \"+this.state.count);\n    } \n    changeGrid = (e) => {\n        \n        console.log(e.target);\n        console.log(\"Target ID =\"+e.target.id);\n        let arr = e.target.id.split(\" \");\n        console.log(\"i=\"+arr[0]+\", j=\"+arr[1]+\", Count = \" + this.state.count);\n        let rowNo = Math.abs(arr[0]-this.state.i_win)\n        let columnNo = Math.abs(arr[1]-this.state.j_win)\n        if(rowNo==0 && columnNo == 0) {\n            e.target.innerHTML = \"W\";\n            e.target.classList.add('winner');\n            this.setState({disable: true, count: this.state.count+1});\n        }\n        else if(rowNo>6 || columnNo >7) {\n            e.target.innerHTML = \".\"\n            e.target.classList.add('cold');\n            this.setState({count: this.state.count+1});\n        }\n        else if(rowNo>2 || columnNo >3) {\n            e.target.innerHTML = \".\"\n            e.target.classList.add('warm');\n            this.setState({count: this.state.count+1});\n        }\n        else if(rowNo>0 || columnNo >0) {\n            e.target.innerHTML = \".\"\n            e.target.classList.add('hot');\n            this.setState({count: this.state.count+1});\n        }\n        /*else {\n            e.target.innerHTML = \"NO\";\n            e.target.classList.add('loser');\n            this.setState({count: this.state.count+1});\n        }**/\n        gridArray[arr[0]][arr[1]] = 1;\n    }\n\n    restart = () => {window.location.reload(false);}\n\n    render() {\n        let table = new Array(rowsize);\n        for(let i=0;i<rowsize;i++){\n            table[i] = new Array(colsize);\n        }\n        let count = 1;\n        for(let i=0;i<rowsize;i++) {\n            for(let j=0;j<colsize;j++) {\n                table[i][j] = <Cell changeGrid={this.changeGrid} id={i+\" \"+j} disable={this.state.disable} count={count}/>;\n                count = count +1;\n            }\n        }\n        return (\n            <div className=\"box-container\">\n                    <div className=\"grid\">\n                        <div className=\"box-text-container\">\n                            <div className=\"box-text\">\n                                {this.state.disable == false ? 'No. of Tries = '+this.state.count : 'Treasure Found! No. of tries = '+this.state.count}\n                            </div>\n                            <button className=\"restart-btn\" onClick={this.restart}>Restart</button>\n                        </div>\n                        <div>\n                            {table.map((row, index)=> {\n                                return <div>{row}</div>;\n                            })}\n                        </div>\n                    </div>\n            </div>\n        );\n    }\n}\n\nexport default Box;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BoxSample from './BoxSample';\nimport './styles.css';\n\nfunction Cell (props){\n        return (\n                <button className=\"cell cell-btn\" onClick={props.changeGrid} id={props.id} disabled={props.disable}>\n                    {props.count}\n                </button>\n        );\n}\n\nexport default Cell;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\n\n\nfunction Footer(){\n    return (\n        <div className=\"footer-container\">\n            <div className= \"footer-text\">Made by Minhaj Ahmed</div>\n        </div>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from './Header';\nimport Box from './Box';\nimport BoxSample from './BoxSample';\nimport Footer from './Footer';\n\nfunction Game(){\n    return (\n        <div className=\"body\">\n            <Header />\n            <Box />\n            <Footer />\n        </div>\n    );\n}\n\nexport default Game;","import React from 'react';\nimport logo from './logo.svg';\nimport Game from './game/Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}